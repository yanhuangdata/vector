data_dir = "/var/lib/vector"

##
## Sources
##

[sources.internal_metrics]
type = "internal_metrics"

[sources.internal_logs]
type = "internal_logs"

[sources.splunk]
address = "0.0.0.0:8282"
type = "splunk_hec"

##
## Transforms
##

[transforms.timestamp_field]
type = "remap"
inputs = ["splunk"]
source = '''
.Timestamp = del(.timestamp)
'''

[transforms.splunk_fields]
type = "remap"
inputs = ["splunk"]

source = '''
# deletes unnecessary fields
del(.attrs.c2cComponent)
del(.attrs.c2cGroup)

# renames fields to fit current state in splunk
.attrs.type = del(.attrs.c2cContainerType)
.attrs.partition = del(.attrs.c2cPartition)
.attrs.role = del(.attrs.c2cRole)
.attrs.service = del(.attrs.c2cService)
.attrs.stage = del(.attrs.c2cStage)
.attrs.version = del(.attrs.c2cVersion)
if exists(.message) {
  .line = del(.message)
}

.host = join!([.attrs.partition, .attrs.stage, "platform", .attrs.c2cRuntimePlatformName], separator: "-")
.splunk_source = join!([.splunk_source, .task_id], separator: "_")

del(.task_id)
del(.lx_version)
del(.source_type)
del(.attrs.c2cRuntimePlatformName)
'''

[transforms.container_type]
type = "route"
inputs = ["timestamp_field"]
[transforms.container_type.route]
service = '.attrs.c2cContainerType == "service"'
ingress = '.attrs.c2cContainerType == "ingress"'
other_sidecar = '.attrs.c2cContainerType != "service" && .attrs.c2cContainerType != "ingress"'

[transforms.splunk_dest]
type = "route"
inputs = ["splunk_fields"]
route.production= """
!includes(["staging", "performance", "playground"], .attrs.stage)
"""
route.staging="""
includes(["staging", "performance", "playground"], .attrs.stage)
"""
route.cloud="""
includes(["splunk"], .attrs.systemid)
"""

[transforms.connection_closed]
type = "filter"
inputs = ["internal_logs"]
condition = 'contains!(.message, "connection closed before message completed", case_sensitive: false)'

[transforms.connection_closed_metric]
type = "log_to_metric"
inputs = [ "connection_closed" ]
[[transforms.connection_closed_metric.metrics]]
type = "counter"
field = "timestamp"
name = "errors_connection_closed"
namespace = "vector"

##
## Sinks
##

[sinks.prometheus]
type = "prometheus_exporter"
inputs = ["internal_metrics", "connection_closed_metric"]
address = "0.0.0.0:9090"

[sinks.splunk_cloud]
type = "splunk_hec_logs"
inputs = ["splunk_dest.cloud"]
endpoint = "http://localhost:8080"
buffer.type = "memory"
buffer.when_full = "drop_newest"
encoding.codec = "json"
encoding.timestamp_format = "rfc3339"
encoding.except_fields = ["splunk_source", "host", "splunk_sourcetype", "splunk_index", "source"]
token = "abcd1234"
healthcheck.enabled = false

[sinks.splunk_production]
type = "splunk_hec_logs"
inputs = ["splunk_dest.production"]
endpoint = "http://localhost:8080"
buffer.type = "memory"
buffer.when_full = "drop_newest"
encoding.codec = "json"
encoding.timestamp_format = "rfc3339"
encoding.except_fields = ["splunk_source", "host", "splunk_sourcetype", "splunk_index", "source"]
token = "abcd1234"
healthcheck.enabled = false

[sinks.splunk_staging]
type = "splunk_hec_logs"
inputs = ["splunk_dest.staging"]
endpoint = "http://localhost:8080"
buffer.type = "memory"
buffer.when_full = "drop_newest"
encoding.codec = "json"
encoding.timestamp_format = "rfc3339"
encoding.except_fields = ["splunk_source", "host", "splunk_sourcetype", "splunk_index", "source"]
token = "abcd1234"
healthcheck.enabled = false
