#!/usr/bin/env python3
import argparse
import common
import numpy as np
import pandas as pd
import scipy.stats
import sys

np.seterr(all='raise')

parser = argparse.ArgumentParser(description='determine if we have unknown erratic soak experiments')
parser.add_argument('--variant', type=str, default='baseline', help='the variant to examine for erratic behavior')
parser.add_argument('--capture-dir', type=str, help='the directory to search for capture files')
parser.add_argument('--vector-cpus', type=int, help='the total number of CPUs given to vector during the experiment')
parser.add_argument('--warmup-seconds', type=int, default=30, help='the number of seconds to treat as warmup')
parser.add_argument('--coefficient-of-variation-limit', type=float, default=0.1, help='the acceptable limit +/- for the ratio of stdev to mean, default 0.1')
parser.add_argument('--erratic-soaks', type=str, default='', help='a comma separated list of known-erratic experiments, NOT TO BE USED LIGHTLY')
parser.add_argument('--fail-if-erratic-shift', type=bool, default=False, help='whether to fail the execution if erratic declarations shifted')
args = parser.parse_args()

known_erratic_soaks = args.erratic_soaks.split(',')

bytes_written = pd.concat(common.compute_throughput(
    common.open_captures(args.capture_dir,
                         'bytes_written',
                         unwanted_labels=['metric_name', 'metric_kind', 'target']),
    cpus = args.vector_cpus))
# Skip past warmup seconds samples, allowing for vector warmup to not factor
# into judgement.
bytes_written = bytes_written[(bytes_written.fetch_index > args.warmup_seconds) &
                              (bytes_written.throughput > 0.0) &
                              (bytes_written.variant == args.variant)]

results = []
for exp in bytes_written.experiment.unique():
    experiment_samples = bytes_written[bytes_written.experiment == exp]
    for run_id in experiment_samples.run_id.unique():
        samples = experiment_samples.loc[experiment_samples.run_id == run_id]

        mean = samples.throughput.mean()
        stdev = samples.throughput.std()
        cov = scipy.stats.variation(samples.throughput)
        outliers = common.total_outliers(samples)
        outlier_ratio = outliers / len(samples)
        erratic = abs(cov) > args.coefficient_of_variation_limit

        results.append({
            'experiment': exp,
            'run_id': run_id,
            'mean': mean,
            'stdev': stdev,
            'coefficient of variation': cov,
            'erratic': erratic,
            'outliers': outliers,
            'outlier ratio': outlier_ratio,
        })

results = pd.DataFrame.from_records(results)
results['mean'] = results['mean'].apply(common.human_bytes)
results['stdev'] = results['stdev'].apply(common.human_bytes)

erratic_violation = results.erratic == True
declared_erratic = results.experiment.isin(known_erratic_soaks)

actually_erratic = results[erratic_violation & ~declared_erratic].copy(deep=True)
no_longer_erratic = results[~erratic_violation & declared_erratic].copy(deep=True)

if len(actually_erratic) > 0:
    print(f"Experiments that were not declared erratic but were detected as being so, cutoff {args.coefficient_of_variation_limit}:")
    print()
    print(actually_erratic.to_markdown(index=False, tablefmt='github'))
    print()

if len(no_longer_erratic) > 0:
    print(f"Experiments that were declared erratic but were detected as no longer being so, cutoff {args.coefficient_of_variation_limit}:")
    print()
    print(no_longer_erratic.to_markdown(index=False, tablefmt='github'))
    print()

if (len(actually_erratic) > 0) or (len(no_longer_erratic) > 0):
    print("Incorrectly labeled experiments detected.")
    # Until we have either a better idea of how to detect erratic soaks _or_ we
    # have the ability to allow failure -- not just continue -- in Github
    # Actions we exit here successfully. Eventually we would like to be in a
    # position where if the variation of a soak goes above limit we fail the PR,
    # but we aren't there yet. For instance, we see in practice that some
    # sub-runs will have above CoV but not all, or they dance right around the
    # limit. Setting CoV to 0.5 _does_ address that but is such a high bar it's
    # not useful.
    if args.fail_if_erratic_shift:
        sys.exit(1)
