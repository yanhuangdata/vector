name: Nightly

on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"

env:
  AUTOINSTALL: true
  CHANNEL: nightly
  VERBOSE: true
  CI: true
  DEBIAN_FRONTEND: noninteractive
  RUSTFLAGS: "-D warnings"

jobs:
  build-x86_64-unknown-linux-musl-packages:
    runs-on: [linux, release-builder]
    steps:
      - uses: colpal/actions-clean@v1
      - uses: actions/checkout@v3
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - run: bash scripts/set-build-description.sh
      - env:
          PASS_FEATURES: "default-cmake"
        run: make package-x86_64-unknown-linux-musl-all
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl.tar.gz
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl.tar.gz"

  build-x86_64-unknown-linux-gnu-debug-tarball:
    runs-on: [linux, release-builder]
    steps:
      - uses: colpal/actions-clean@v1
      - uses: actions/checkout@v3
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - env:
          CARGO_PROFILE_RELEASE_DEBUG: 2 # https://doc.rust-lang.org/cargo/reference/profiles.html#debug
        run: bash scripts/set-build-description.sh
      - env:
          PASS_FEATURES: "default"
          CARGO_PROFILE_RELEASE_DEBUG: 2 # https://doc.rust-lang.org/cargo/reference/profiles.html#debug
        run: make package-x86_64-unknown-linux-gnu
      - name: rename gnu tarball to gnu-debug tarball
        run: |
          mv "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu.tar.gz" \
             "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu-debug.tar.gz"
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu-debug.tar.gz
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu-debug.tar.gz"

  build-x86_64-unknown-linux-gnu-packages:
    runs-on: [linux, release-builder]
    steps:
      - uses: colpal/actions-clean@v1
      - uses: actions/checkout@v3
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - run: bash scripts/set-build-description.sh
      - env:
          PASS_FEATURES: "default"
        run: make package-x86_64-unknown-linux-gnu-all
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu.tar.gz
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu.tar.gz"
      - uses: actions/upload-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          path: "./target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_amd64.deb"
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm"

  build-aarch64-unknown-linux-musl-packages:
    runs-on: [linux, release-builder]
    steps:
      - uses: colpal/actions-clean@v1
      - uses: actions/checkout@v3
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - run: bash scripts/set-build-description.sh
      - env:
          DOCKER_PRIVILEGED: "true"
          PASS_FEATURES: "default-cmake"
        run: make package-aarch64-unknown-linux-musl-all
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl.tar.gz
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl.tar.gz"

  build-aarch64-unknown-linux-gnu-packages:
    runs-on: [linux, release-builder]
    steps:
      - uses: colpal/actions-clean@v1
      - uses: actions/checkout@v3
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - run: bash scripts/set-build-description.sh
      - env:
          DOCKER_PRIVILEGED: "true"
          PASS_FEATURES: "default"
        run: make package-aarch64-unknown-linux-gnu-all
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu.tar.gz
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu.tar.gz"
      - uses: actions/upload-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_arm64.deb
          path: "./target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_arm64.deb"
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.aarch64.rpm
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.aarch64.rpm"

  build-armv7-unknown-linux-gnueabihf-packages:
    runs-on: [linux, release-builder]
    steps:
      - uses: colpal/actions-clean@v1
      - uses: actions/checkout@v3
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - run: bash scripts/set-build-description.sh
      - env:
          DOCKER_PRIVILEGED: "true"
        run: make package-armv7-unknown-linux-gnueabihf-all
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf.tar.gz
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf.tar.gz"
      - uses: actions/upload-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_armhf.deb
          path: "./target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_armhf.deb"
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.armv7.rpm
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.armv7.rpm"

  build-armv7-unknown-linux-musleabihf-packages:
    runs-on: [linux, release-builder]
    steps:
      - uses: colpal/actions-clean@v1
      - uses: actions/checkout@v3
      - run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - run: bash scripts/set-build-description.sh
      - env:
          DOCKER_PRIVILEGED: "true"
        run: make package-armv7-unknown-linux-musleabihf
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf.tar.gz
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf.tar.gz"

  build-x86_64-apple-darwin-packages:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v3
      - name: "Upgrade bash"
        run: brew install bash
      - name: "Install realpath dependency"
        run: brew install coreutils
      - name: "Add Vector version"
        run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
        shell: bash
      - name: "Set Vector build description"
        run: ./scripts/set-build-description.sh
        shell: bash
      - name: "Set release flags"
        run: ./scripts/environment/release-flags.sh
        shell: bash
      - name: "Build archive"
        env:
          TARGET: "x86_64-apple-darwin"
          NATIVE_BUILD: true
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          make package
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin.tar.gz
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin.tar.gz"

  build-x86_64-pc-windows-msvc-packages:
    runs-on: [windows, release-builder]
    env:
      RUSTFLAGS: "-D warnings -Ctarget-feature=+crt-static"
      RELEASE_BUILDER: "true"
    steps:
      - uses: actions/checkout@v3
      - name: "Add Vector version"
        run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
        shell: bash
      - name: "Set Vector build description"
        run: ./scripts/set-build-description.sh
        shell: bash
      - name: "Set release flags"
        run: ./scripts/environment/release-flags.sh
        shell: bash
      - name: "Configure environment"
        run: .\scripts\environment\bootstrap-windows-2019.ps1
      - name: "Install Wix"
        shell: bash
        run: |
          mkdir -p /c/wix
          cd /c/wix
          curl -sSfL https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip > wix-binaries.zip
          unzip -o wix-binaries.zip
          rm wix-binaries.zip
      - name: "Build archive"
        shell: bash
        run: |
          export FEATURES="default-msvc"
          export ARCHIVE_TYPE="zip"
          export KEEP_SYMBOLS="true"
          export RUST_LTO=""
          export TARGET="x86_64-pc-windows-msvc"
          export NATIVE_BUILD="true"
          make package
      - name: "Build package"
        shell: bash
        run: |
          export PATH="/c/wix:$PATH"
          ./scripts/package-msi.sh
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-pc-windows-msvc.zip
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-pc-windows-msvc.zip"
      - uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x64.msi
          path: "./target/artifacts/vector-${{ env.VECTOR_VERSION }}-x64.msi"

  deb-verify:
    needs:
      - build-x86_64-unknown-linux-gnu-packages
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        container: ["ubuntu:14.04","ubuntu:16.04","ubuntu:18.04","ubuntu:20.04","debian:9","debian:10","debian:11"]
    container:
      image: ${{ matrix.container }}
    steps:
      - run: |
          apt-get update && \
          apt-get install -y \
          ca-certificates \
          curl \
          git \
          systemd \
          make
        # https://github.com/actions/checkout/issues/760
      - name: work around permission issue
        run: git config --global --add safe.directory /__w/vector/vector
      - name: checkout
        uses: actions/checkout@v3
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          path: target/artifacts
      - name: First install of DEB package.
        run: |
          dpkg -i target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          ./scripts/verify-install.sh
      - name: Second install of DEB package.
        run: |
          dpkg -i target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          ./scripts/verify-install.sh

  rpm-verify:
    needs:
      - build-x86_64-unknown-linux-gnu-packages
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        container:
          - "quay.io/centos/centos:stream8"
          - "quay.io/centos/centos:stream9"
          - "amazonlinux:1"
          - "amazonlinux:2"
          - "fedora:34"
          - "fedora:35"
          - "fedora:36"
    container:
      image: ${{ matrix.container }}
    steps:
      - run: |
          yum update -y
          yum install -y \
          ca-certificates \
          git \
          systemd \
          tar \
          make
          # conflicts with curl-minimal on some distros and --allowerased is not
          # supported on some distros
          if ! command -v curl &> /dev/null ; then
            yum install -y curl
          fi
        # https://github.com/actions/checkout/issues/760
      - name: work around permission issue
        run: git config --global --add safe.directory /__w/vector/vector
      - name: checkout
        uses: actions/checkout@v3
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - uses: actions/download-artifact@v3
        with:
          name:  vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm
          path: target/artifacts
      - name: First install of RPM package.
        run: |
          rpm -i --replacepkgs target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm
          ./scripts/verify-install.sh
      - name: Second install of RPM package.
        run: |
          rpm -i --replacepkgs target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm
          ./scripts/verify-install.sh

  osx-verify:
    runs-on: macos-10.15
    needs:
      - build-x86_64-apple-darwin-packages
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - uses: actions/download-artifact@v3
        with:
          name:  vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin.tar.gz
          path: target/artifacts
      - run: |
          tar -xvf target/artifacts/vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin.tar.gz && vector-x86_64-apple-darwin/bin/vector --version

  release-docker:
    runs-on: ubuntu-18.04
    needs:
      - build-aarch64-unknown-linux-gnu-packages
      - build-aarch64-unknown-linux-musl-packages
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - build-armv7-unknown-linux-musleabihf-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - deb-verify
    steps:
      - uses: actions/checkout@v3
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.CI_DOCKER_USERNAME }}
          password: ${{ secrets.CI_DOCKER_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.0.0
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.0.0
        with:
          version: latest
          install: true
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_arm64.deb
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_armhf.deb
          path: target/artifacts
      - env:
          PLATFORM: "linux/amd64,linux/arm64,linux/arm/v7"
        run: |
          make release-docker

  release-s3:
    runs-on: ubuntu-18.04
    needs:
      - build-x86_64-unknown-linux-gnu-debug-tarball
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-gnu-packages
      - build-x86_64-apple-darwin-packages
      - build-x86_64-pc-windows-msvc-packages
      - build-armv7-unknown-linux-musleabihf-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - deb-verify
      - rpm-verify
      - osx-verify
    steps:
      - uses: actions/checkout@v3
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu-debug.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_arm64.deb
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_armhf.deb
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin.tar.gz
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-pc-windows-msvc.zip
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x64.msi
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.aarch64.rpm
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.armv7.rpm
          path: target/artifacts
      - env:
          AWS_ACCESS_KEY_ID: "${{ secrets.CI_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}"
        run: make release-s3

  release-cloudsmith:
    runs-on: ubuntu-20.04
    needs:
      - build-x86_64-unknown-linux-gnu-packages
      - build-aarch64-unknown-linux-gnu-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - deb-verify
      - rpm-verify
    steps:
      - uses: actions/checkout@v3
      - run: echo VECTOR_VERSION=$(make version) >> $GITHUB_ENV
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_arm64.deb
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector_${{ env.VECTOR_VERSION }}-1_armhf.deb
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.aarch64.rpm
          path: target/artifacts
      - uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-1.armv7.rpm
          path: target/artifacts
      - name: Push amd64 deb
        id: push-deb-amd64
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "deb"
          owner: "timber"
          repo: "vector-nightly"
          distro: "any-distro"
          release: "any-version"
          republish: "true"
          file: "target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_amd64.deb"
      - name: Push arm64 deb
        id: push-deb-arm64
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "deb"
          owner: "timber"
          repo: "vector-nightly"
          distro: "any-distro"
          release: "any-version"
          republish: "true"
          file: "target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_arm64.deb"
      - name: Push armhf deb
        id: push-deb-armhf
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "deb"
          owner: "timber"
          repo: "vector-nightly"
          distro: "any-distro"
          release: "any-version"
          republish: "true"
          file: "target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_armhf.deb"
      - name: Push x86_64 GNU RPM
        id: push-rpm-x86_64-gnu
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "rpm"
          owner: "timber"
          repo: "vector-nightly"
          distro: "any-distro"
          release: "any-version"
          republish: "true"
          file: "target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm"
      - name: Push aarch64 RPM
        id: push-rpm-aarch64
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "rpm"
          owner: "timber"
          repo: "vector-nightly"
          distro: "any-distro"
          release: "any-version"
          republish: "true"
          file: "target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.aarch64.rpm"
      - name: Push armv7-gnu RPM
        id: push-rpm-armv7-gnu
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "rpm"
          owner: "timber"
          repo: "vector-nightly"
          distro: "any-distro"
          release: "any-version"
          republish: "true"
          file: "target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.armv7.rpm"

  nightly-failure:
    name: nightly-failure
    if: failure() && github.ref == 'refs/heads/master'
    needs:
      - build-x86_64-unknown-linux-gnu-debug-tarball
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-musl-packages
      - build-aarch64-unknown-linux-gnu-packages
      - build-x86_64-apple-darwin-packages
      - build-x86_64-pc-windows-msvc-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - build-armv7-unknown-linux-musleabihf-packages
      - release-docker
      - release-s3
      - release-cloudsmith
      - deb-verify
      - rpm-verify
      - osx-verify
    runs-on: ubuntu-20.04
    steps:
    - name: Discord notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@0.3.2
      with:
        args: "Master nightly failed: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"
