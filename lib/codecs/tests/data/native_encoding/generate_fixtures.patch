diff --git a/lib/value/src/value/arbitrary.rs b/lib/value/src/value/arbitrary.rs
index 993b86209..1e05d435a 100644
--- a/lib/value/src/value/arbitrary.rs
+++ b/lib/value/src/value/arbitrary.rs
@@ -1,6 +1,5 @@
 use crate::Value;
 use bytes::Bytes;
-use chrono::{DateTime, NaiveDateTime, Utc};
 use ordered_float::NotNan;
 use quickcheck::{Arbitrary, Gen};
 use std::collections::BTreeMap;
@@ -9,15 +8,6 @@ const MAX_ARRAY_SIZE: usize = 4;
 const MAX_MAP_SIZE: usize = 4;
 const MAX_F64_SIZE: f64 = 1_000_000.0;
 
-fn datetime(g: &mut Gen) -> DateTime<Utc> {
-    // `chrono` documents that there is an out-of-range for both second and
-    // nanosecond values but doesn't actually document what the valid ranges
-    // are. We just sort of arbitrarily restrict things.
-    let secs = i64::arbitrary(g) % 32_000;
-    let nanosecs = u32::arbitrary(g) % 32_000;
-    DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(secs, nanosecs), Utc)
-}
-
 impl Arbitrary for Value {
     fn arbitrary(g: &mut Gen) -> Self {
         // Quickcheck can't derive Arbitrary for enums, see
@@ -27,7 +17,7 @@ impl Arbitrary for Value {
         // field picking.
         match u8::arbitrary(g) % 8 {
             0 => {
-                let bytes: Vec<u8> = Vec::arbitrary(g);
+                let bytes = String::arbitrary(g);
                 Self::Bytes(Bytes::from(bytes))
             }
             1 => Self::Integer(i64::arbitrary(g)),
@@ -37,8 +27,7 @@ impl Arbitrary for Value {
                 Self::from(not_nan)
             }
             3 => Self::Boolean(bool::arbitrary(g)),
-            4 => Self::Timestamp(datetime(g)),
-            5 => {
+            4 | 5 => {
                 let mut gen = Gen::new(MAX_MAP_SIZE);
                 Self::Object(BTreeMap::arbitrary(&mut gen))
             }
diff --git a/lib/vector-core/src/event/test/common.rs b/lib/vector-core/src/event/test/common.rs
index 90bd9af01..d56a610ed 100644
--- a/lib/vector-core/src/event/test/common.rs
+++ b/lib/vector-core/src/event/test/common.rs
@@ -20,6 +20,15 @@ const ALPHABET: [&str; 27] = [
     "t", "u", "v", "w", "x", "y", "z", "_",
 ];
 
+fn make_simple_f64(g: &mut Gen) -> f64 {
+    let mut value = f64::arbitrary(g) % MAX_F64_SIZE;
+    while value.is_nan() || value == -0.0 {
+        value = f64::arbitrary(g) % MAX_F64_SIZE;
+    }
+    value = (value * 10_000.0).round() / 10_000.0;
+    value
+}
+
 #[derive(Debug, Clone)]
 pub struct Name {
     inner: String,
@@ -28,7 +37,7 @@ pub struct Name {
 impl Arbitrary for Name {
     fn arbitrary(g: &mut Gen) -> Self {
         let mut name = String::with_capacity(MAX_STR_SIZE);
-        for _ in 0..(g.size() % MAX_STR_SIZE) {
+        for _ in 0..(usize::max(1, g.size() % MAX_STR_SIZE)) {
             let idx: usize = usize::arbitrary(g) % ALPHABET.len();
             name.push_str(ALPHABET[idx]);
         }
@@ -174,10 +183,10 @@ impl Arbitrary for MetricValue {
         // here toward `MetricValue::Counter` and `MetricValue::Gauge`.
         match u8::arbitrary(g) % 6 {
             0 => MetricValue::Counter {
-                value: f64::arbitrary(g) % MAX_F64_SIZE,
+                value: make_simple_f64(g),
             },
             1 => MetricValue::Gauge {
-                value: f64::arbitrary(g) % MAX_F64_SIZE,
+                value: make_simple_f64(g),
             },
             2 => MetricValue::Set {
                 values: BTreeSet::arbitrary(g),
@@ -189,12 +198,12 @@ impl Arbitrary for MetricValue {
             4 => MetricValue::AggregatedHistogram {
                 buckets: Vec::arbitrary(g),
                 count: u32::arbitrary(g),
-                sum: f64::arbitrary(g) % MAX_F64_SIZE,
+                sum: make_simple_f64(g),
             },
             5 => MetricValue::AggregatedSummary {
                 quantiles: Vec::arbitrary(g),
                 count: u32::arbitrary(g),
-                sum: f64::arbitrary(g) % MAX_F64_SIZE,
+                sum: make_simple_f64(g),
             },
             _ => unreachable!(),
         }
@@ -339,7 +348,7 @@ impl Arbitrary for MetricValue {
 impl Arbitrary for Sample {
     fn arbitrary(g: &mut Gen) -> Self {
         Sample {
-            value: f64::arbitrary(g) % MAX_F64_SIZE,
+            value: make_simple_f64(g),
             rate: u32::arbitrary(g),
         }
     }
@@ -369,8 +378,8 @@ impl Arbitrary for Sample {
 impl Arbitrary for Quantile {
     fn arbitrary(g: &mut Gen) -> Self {
         Quantile {
-            quantile: f64::arbitrary(g) % MAX_F64_SIZE,
-            value: f64::arbitrary(g) % MAX_F64_SIZE,
+            quantile: make_simple_f64(g),
+            value: make_simple_f64(g),
         }
     }
 
@@ -399,7 +408,7 @@ impl Arbitrary for Quantile {
 impl Arbitrary for Bucket {
     fn arbitrary(g: &mut Gen) -> Self {
         Bucket {
-            upper_limit: f64::arbitrary(g) % MAX_F64_SIZE,
+            upper_limit: make_simple_f64(g),
             count: u32::arbitrary(g),
         }
     }
diff --git a/lib/vector-core/src/event/test/serialization.rs b/lib/vector-core/src/event/test/serialization.rs
index 4d5b7c358..ce92d58dd 100644
--- a/lib/vector-core/src/event/test/serialization.rs
+++ b/lib/vector-core/src/event/test/serialization.rs
@@ -198,3 +198,23 @@ fn type_serialization() {
     assert_eq!(map["bool"], json!(true));
     assert_eq!(map["string"], json!("thisisastring"));
 }
+
+#[test]
+fn roundtrip() {
+    use quickcheck::{Arbitrary, Gen};
+    use std::{fs::File, io::Write};
+
+    let mut gen = Gen::new(128);
+    for n in 0..1024 {
+        let mut json_out = File::create(format!("json/{n:04}.json")).unwrap();
+        let mut proto_out = File::create(format!("proto/{n:04}.pb")).unwrap();
+        let event = Event::arbitrary(&mut gen);
+        serde_json::to_writer(&mut json_out, &event).unwrap();
+
+        let array = EventArray::from(event);
+        let proto = proto::EventArray::from(array);
+        let mut buf = BytesMut::new();
+        proto.encode(&mut buf).unwrap();
+        proto_out.write_all(&buf).unwrap();
+    }
+}
